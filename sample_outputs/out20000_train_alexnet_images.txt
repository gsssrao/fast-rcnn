added /data/gpuuser1/fast-rcnn/caffe-fast-rcnn/python
added /data/gpuuser1/fast-rcnn/lib
added /data/gpuuser1/fast-rcnn/python_utils
added /data/gpuuser1/fast-rcnn/.
Called with args:
Namespace(caffemodel='output/training_demo/alexnet_rgb_alexnet_hha/nyud2_images+hha_2015_trainval_exp/fast_rcnn_iter_exp_20000.caffemodel', cfg_file='output/training_demo/alexnet_rgb/config.prototxt.images', comp_mode=False, gpu_id=0, imdb_name='nyud2_images_2015_test', prototxt='output/training_demo/alexnet_rgb/test.prototxt.images', wait=True)
Using config:
{'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'training_demo/alexnet_rgb',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/data/gpuuser1/fast-rcnn',
 'TEST': {'BBOX_REG': True,
          'DET_SALT': '',
          'EVAL_SALT': '',
          'MAX_PER_IMAGE': 100,
          'MAX_PER_SET_F': 40,
          'MAX_SIZE': 2000,
          'NMS': 0.3,
          'SCALES': [688],
          'SVM': False},
 'TRAIN': {'BATCH_SIZE': 128,
           'BBOX_PRED_PARAM_NAMES': ['bbox_pred'],
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 2000,
           'SCALES': [688],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 10000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False}}
WARNING: Logging before InitGoogleLogging() is written to STDERR
I1004 23:31:04.413184  3990 net.cpp:42] Initializing net from parameters: 
name: "CaffeNet"
input: "data"
input: "rois"
state {
  phase: TEST
}
input_shape {
  dim: 1
  dim: 3
  dim: 227
  dim: 227
}
input_shape {
  dim: 1
  dim: 5
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    pad: 5
    kernel_size: 11
    stride: 4
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
    pad: 1
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
    pad: 1
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "roi_pool5"
  type: "ROIPooling"
  bottom: "conv5"
  bottom: "rois"
  top: "pool5"
  roi_pooling_param {
    pooled_h: 6
    pooled_w: 6
    spatial_scale: 0.0625
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score_0"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 20
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred_0"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 80
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "sum"
  type: "Eltwise"
  bottom: "bbox_pred_0"
  bottom: "bbox_pred_0"
  top: "bbox_pred"
  eltwise_param {
    operation: SUM
    coeff: 0.5
    coeff: 0.5
  }
}
layer {
  name: "sum"
  type: "Eltwise"
  bottom: "cls_score_0"
  bottom: "cls_score_0"
  top: "cls_score"
  eltwise_param {
    operation: SUM
    coeff: 0.5
    coeff: 0.5
  }
}
layer {
  name: "cls_prob"
  type: "Softmax"
  bottom: "cls_score"
  top: "cls_prob"
}
I1004 23:31:04.413348  3990 net.cpp:340] Input 0 -> data
I1004 23:31:04.413378  3990 net.cpp:340] Input 1 -> rois
I1004 23:31:04.413398  3990 layer_factory.hpp:74] Creating layer conv1
I1004 23:31:04.413414  3990 net.cpp:84] Creating Layer conv1
I1004 23:31:04.413421  3990 net.cpp:380] conv1 <- data
I1004 23:31:04.413432  3990 net.cpp:338] conv1 -> conv1
I1004 23:31:04.413444  3990 net.cpp:113] Setting up conv1
I1004 23:31:04.473599  3990 net.cpp:120] Top shape: 1 96 57 57 (311904)
I1004 23:31:04.473642  3990 layer_factory.hpp:74] Creating layer relu1
I1004 23:31:04.473660  3990 net.cpp:84] Creating Layer relu1
I1004 23:31:04.473667  3990 net.cpp:380] relu1 <- conv1
I1004 23:31:04.473677  3990 net.cpp:327] relu1 -> conv1 (in-place)
I1004 23:31:04.473688  3990 net.cpp:113] Setting up relu1
I1004 23:31:04.473752  3990 net.cpp:120] Top shape: 1 96 57 57 (311904)
I1004 23:31:04.473762  3990 layer_factory.hpp:74] Creating layer pool1
I1004 23:31:04.473769  3990 layer_factory.cpp:56] CUDNN does not support padding or multiple tops. Using Caffe's own pooling layer.
I1004 23:31:04.473779  3990 net.cpp:84] Creating Layer pool1
I1004 23:31:04.473786  3990 net.cpp:380] pool1 <- conv1
I1004 23:31:04.473795  3990 net.cpp:338] pool1 -> pool1
I1004 23:31:04.473805  3990 net.cpp:113] Setting up pool1
I1004 23:31:04.473821  3990 net.cpp:120] Top shape: 1 96 29 29 (80736)
I1004 23:31:04.473829  3990 layer_factory.hpp:74] Creating layer norm1
I1004 23:31:04.473839  3990 net.cpp:84] Creating Layer norm1
I1004 23:31:04.473846  3990 net.cpp:380] norm1 <- pool1
I1004 23:31:04.473855  3990 net.cpp:338] norm1 -> norm1
I1004 23:31:04.473865  3990 net.cpp:113] Setting up norm1
I1004 23:31:04.473878  3990 net.cpp:120] Top shape: 1 96 29 29 (80736)
I1004 23:31:04.473888  3990 layer_factory.hpp:74] Creating layer conv2
I1004 23:31:04.473901  3990 net.cpp:84] Creating Layer conv2
I1004 23:31:04.473907  3990 net.cpp:380] conv2 <- norm1
I1004 23:31:04.473917  3990 net.cpp:338] conv2 -> conv2
I1004 23:31:04.473927  3990 net.cpp:113] Setting up conv2
I1004 23:31:04.475164  3990 net.cpp:120] Top shape: 1 256 29 29 (215296)
I1004 23:31:04.475185  3990 layer_factory.hpp:74] Creating layer relu2
I1004 23:31:04.475199  3990 net.cpp:84] Creating Layer relu2
I1004 23:31:04.475206  3990 net.cpp:380] relu2 <- conv2
I1004 23:31:04.475215  3990 net.cpp:327] relu2 -> conv2 (in-place)
I1004 23:31:04.475224  3990 net.cpp:113] Setting up relu2
I1004 23:31:04.475281  3990 net.cpp:120] Top shape: 1 256 29 29 (215296)
I1004 23:31:04.475291  3990 layer_factory.hpp:74] Creating layer pool2
I1004 23:31:04.475297  3990 layer_factory.cpp:56] CUDNN does not support padding or multiple tops. Using Caffe's own pooling layer.
I1004 23:31:04.475306  3990 net.cpp:84] Creating Layer pool2
I1004 23:31:04.475312  3990 net.cpp:380] pool2 <- conv2
I1004 23:31:04.475322  3990 net.cpp:338] pool2 -> pool2
I1004 23:31:04.475330  3990 net.cpp:113] Setting up pool2
I1004 23:31:04.475342  3990 net.cpp:120] Top shape: 1 256 15 15 (57600)
I1004 23:31:04.475349  3990 layer_factory.hpp:74] Creating layer norm2
I1004 23:31:04.475358  3990 net.cpp:84] Creating Layer norm2
I1004 23:31:04.475365  3990 net.cpp:380] norm2 <- pool2
I1004 23:31:04.475373  3990 net.cpp:338] norm2 -> norm2
I1004 23:31:04.475383  3990 net.cpp:113] Setting up norm2
I1004 23:31:04.475392  3990 net.cpp:120] Top shape: 1 256 15 15 (57600)
I1004 23:31:04.475399  3990 layer_factory.hpp:74] Creating layer conv3
I1004 23:31:04.475409  3990 net.cpp:84] Creating Layer conv3
I1004 23:31:04.475416  3990 net.cpp:380] conv3 <- norm2
I1004 23:31:04.475425  3990 net.cpp:338] conv3 -> conv3
I1004 23:31:04.475435  3990 net.cpp:113] Setting up conv3
I1004 23:31:04.477268  3990 net.cpp:120] Top shape: 1 384 15 15 (86400)
I1004 23:31:04.477293  3990 layer_factory.hpp:74] Creating layer relu3
I1004 23:31:04.477308  3990 net.cpp:84] Creating Layer relu3
I1004 23:31:04.477314  3990 net.cpp:380] relu3 <- conv3
I1004 23:31:04.477324  3990 net.cpp:327] relu3 -> conv3 (in-place)
I1004 23:31:04.477334  3990 net.cpp:113] Setting up relu3
I1004 23:31:04.477390  3990 net.cpp:120] Top shape: 1 384 15 15 (86400)
I1004 23:31:04.477399  3990 layer_factory.hpp:74] Creating layer conv4
I1004 23:31:04.477409  3990 net.cpp:84] Creating Layer conv4
I1004 23:31:04.477416  3990 net.cpp:380] conv4 <- conv3
I1004 23:31:04.477426  3990 net.cpp:338] conv4 -> conv4
I1004 23:31:04.477435  3990 net.cpp:113] Setting up conv4
I1004 23:31:04.479472  3990 net.cpp:120] Top shape: 1 384 15 15 (86400)
I1004 23:31:04.479496  3990 layer_factory.hpp:74] Creating layer relu4
I1004 23:31:04.479509  3990 net.cpp:84] Creating Layer relu4
I1004 23:31:04.479516  3990 net.cpp:380] relu4 <- conv4
I1004 23:31:04.479526  3990 net.cpp:327] relu4 -> conv4 (in-place)
I1004 23:31:04.479534  3990 net.cpp:113] Setting up relu4
I1004 23:31:04.479737  3990 net.cpp:120] Top shape: 1 384 15 15 (86400)
I1004 23:31:04.479751  3990 layer_factory.hpp:74] Creating layer conv5
I1004 23:31:04.479765  3990 net.cpp:84] Creating Layer conv5
I1004 23:31:04.479773  3990 net.cpp:380] conv5 <- conv4
I1004 23:31:04.479784  3990 net.cpp:338] conv5 -> conv5
I1004 23:31:04.479795  3990 net.cpp:113] Setting up conv5
I1004 23:31:04.481385  3990 net.cpp:120] Top shape: 1 256 15 15 (57600)
I1004 23:31:04.481412  3990 layer_factory.hpp:74] Creating layer relu5
I1004 23:31:04.481423  3990 net.cpp:84] Creating Layer relu5
I1004 23:31:04.481431  3990 net.cpp:380] relu5 <- conv5
I1004 23:31:04.481439  3990 net.cpp:327] relu5 -> conv5 (in-place)
I1004 23:31:04.481448  3990 net.cpp:113] Setting up relu5
I1004 23:31:04.481518  3990 net.cpp:120] Top shape: 1 256 15 15 (57600)
I1004 23:31:04.481531  3990 layer_factory.hpp:74] Creating layer roi_pool5
I1004 23:31:04.481544  3990 net.cpp:84] Creating Layer roi_pool5
I1004 23:31:04.481551  3990 net.cpp:380] roi_pool5 <- conv5
I1004 23:31:04.481559  3990 net.cpp:380] roi_pool5 <- rois
I1004 23:31:04.481573  3990 net.cpp:338] roi_pool5 -> pool5
I1004 23:31:04.481588  3990 net.cpp:113] Setting up roi_pool5
I1004 23:31:04.481597  3990 roi_pooling_layer.cpp:30] Spatial scale: 0.0625
I1004 23:31:04.481624  3990 net.cpp:120] Top shape: 1 256 6 6 (9216)
I1004 23:31:04.481632  3990 layer_factory.hpp:74] Creating layer fc6
I1004 23:31:04.481643  3990 net.cpp:84] Creating Layer fc6
I1004 23:31:04.481649  3990 net.cpp:380] fc6 <- pool5
I1004 23:31:04.481662  3990 net.cpp:338] fc6 -> fc6
I1004 23:31:04.481672  3990 net.cpp:113] Setting up fc6
I1004 23:31:04.535372  3990 net.cpp:120] Top shape: 1 4096 (4096)
I1004 23:31:04.535414  3990 layer_factory.hpp:74] Creating layer relu6
I1004 23:31:04.535439  3990 net.cpp:84] Creating Layer relu6
I1004 23:31:04.535447  3990 net.cpp:380] relu6 <- fc6
I1004 23:31:04.535457  3990 net.cpp:327] relu6 -> fc6 (in-place)
I1004 23:31:04.535468  3990 net.cpp:113] Setting up relu6
I1004 23:31:04.535567  3990 net.cpp:120] Top shape: 1 4096 (4096)
I1004 23:31:04.535578  3990 layer_factory.hpp:74] Creating layer drop6
I1004 23:31:04.535593  3990 net.cpp:84] Creating Layer drop6
I1004 23:31:04.535600  3990 net.cpp:380] drop6 <- fc6
I1004 23:31:04.535609  3990 net.cpp:327] drop6 -> fc6 (in-place)
I1004 23:31:04.535617  3990 net.cpp:113] Setting up drop6
I1004 23:31:04.535629  3990 net.cpp:120] Top shape: 1 4096 (4096)
I1004 23:31:04.535634  3990 layer_factory.hpp:74] Creating layer fc7
I1004 23:31:04.535648  3990 net.cpp:84] Creating Layer fc7
I1004 23:31:04.535655  3990 net.cpp:380] fc7 <- fc6
I1004 23:31:04.535665  3990 net.cpp:338] fc7 -> fc7
I1004 23:31:04.535676  3990 net.cpp:113] Setting up fc7
I1004 23:31:04.559978  3990 net.cpp:120] Top shape: 1 4096 (4096)
I1004 23:31:04.560020  3990 layer_factory.hpp:74] Creating layer relu7
I1004 23:31:04.560039  3990 net.cpp:84] Creating Layer relu7
I1004 23:31:04.560046  3990 net.cpp:380] relu7 <- fc7
I1004 23:31:04.560057  3990 net.cpp:327] relu7 -> fc7 (in-place)
I1004 23:31:04.560068  3990 net.cpp:113] Setting up relu7
I1004 23:31:04.560379  3990 net.cpp:120] Top shape: 1 4096 (4096)
I1004 23:31:04.560395  3990 layer_factory.hpp:74] Creating layer drop7
I1004 23:31:04.560405  3990 net.cpp:84] Creating Layer drop7
I1004 23:31:04.560411  3990 net.cpp:380] drop7 <- fc7
I1004 23:31:04.560420  3990 net.cpp:327] drop7 -> fc7 (in-place)
I1004 23:31:04.560430  3990 net.cpp:113] Setting up drop7
I1004 23:31:04.560439  3990 net.cpp:120] Top shape: 1 4096 (4096)
I1004 23:31:04.560446  3990 layer_factory.hpp:74] Creating layer fc7_drop7_0_split
I1004 23:31:04.560461  3990 net.cpp:84] Creating Layer fc7_drop7_0_split
I1004 23:31:04.560468  3990 net.cpp:380] fc7_drop7_0_split <- fc7
I1004 23:31:04.560479  3990 net.cpp:338] fc7_drop7_0_split -> fc7_drop7_0_split_0
I1004 23:31:04.560492  3990 net.cpp:338] fc7_drop7_0_split -> fc7_drop7_0_split_1
I1004 23:31:04.560500  3990 net.cpp:113] Setting up fc7_drop7_0_split
I1004 23:31:04.560510  3990 net.cpp:120] Top shape: 1 4096 (4096)
I1004 23:31:04.560518  3990 net.cpp:120] Top shape: 1 4096 (4096)
I1004 23:31:04.560524  3990 layer_factory.hpp:74] Creating layer cls_score
I1004 23:31:04.560537  3990 net.cpp:84] Creating Layer cls_score
I1004 23:31:04.560544  3990 net.cpp:380] cls_score <- fc7_drop7_0_split_0
I1004 23:31:04.560554  3990 net.cpp:338] cls_score -> cls_score_0
I1004 23:31:04.560569  3990 net.cpp:113] Setting up cls_score
I1004 23:31:04.563889  3990 net.cpp:120] Top shape: 1 20 (20)
I1004 23:31:04.563906  3990 layer_factory.hpp:74] Creating layer cls_score_0_cls_score_0_split
I1004 23:31:04.563916  3990 net.cpp:84] Creating Layer cls_score_0_cls_score_0_split
I1004 23:31:04.563923  3990 net.cpp:380] cls_score_0_cls_score_0_split <- cls_score_0
I1004 23:31:04.563935  3990 net.cpp:338] cls_score_0_cls_score_0_split -> cls_score_0_cls_score_0_split_0
I1004 23:31:04.563946  3990 net.cpp:338] cls_score_0_cls_score_0_split -> cls_score_0_cls_score_0_split_1
I1004 23:31:04.563956  3990 net.cpp:113] Setting up cls_score_0_cls_score_0_split
I1004 23:31:04.563966  3990 net.cpp:120] Top shape: 1 20 (20)
I1004 23:31:04.563972  3990 net.cpp:120] Top shape: 1 20 (20)
I1004 23:31:04.563979  3990 layer_factory.hpp:74] Creating layer bbox_pred
I1004 23:31:04.563989  3990 net.cpp:84] Creating Layer bbox_pred
I1004 23:31:04.563995  3990 net.cpp:380] bbox_pred <- fc7_drop7_0_split_1
I1004 23:31:04.564007  3990 net.cpp:338] bbox_pred -> bbox_pred_0
I1004 23:31:04.564016  3990 net.cpp:113] Setting up bbox_pred
I1004 23:31:04.575279  3990 net.cpp:120] Top shape: 1 80 (80)
I1004 23:31:04.575306  3990 layer_factory.hpp:74] Creating layer bbox_pred_0_bbox_pred_0_split
I1004 23:31:04.575319  3990 net.cpp:84] Creating Layer bbox_pred_0_bbox_pred_0_split
I1004 23:31:04.575325  3990 net.cpp:380] bbox_pred_0_bbox_pred_0_split <- bbox_pred_0
I1004 23:31:04.575333  3990 net.cpp:338] bbox_pred_0_bbox_pred_0_split -> bbox_pred_0_bbox_pred_0_split_0
I1004 23:31:04.575345  3990 net.cpp:338] bbox_pred_0_bbox_pred_0_split -> bbox_pred_0_bbox_pred_0_split_1
I1004 23:31:04.575356  3990 net.cpp:113] Setting up bbox_pred_0_bbox_pred_0_split
I1004 23:31:04.575366  3990 net.cpp:120] Top shape: 1 80 (80)
I1004 23:31:04.575372  3990 net.cpp:120] Top shape: 1 80 (80)
I1004 23:31:04.575379  3990 layer_factory.hpp:74] Creating layer sum
I1004 23:31:04.575392  3990 net.cpp:84] Creating Layer sum
I1004 23:31:04.575398  3990 net.cpp:380] sum <- bbox_pred_0_bbox_pred_0_split_0
I1004 23:31:04.575407  3990 net.cpp:380] sum <- bbox_pred_0_bbox_pred_0_split_1
I1004 23:31:04.575414  3990 net.cpp:338] sum -> bbox_pred
I1004 23:31:04.575423  3990 net.cpp:113] Setting up sum
I1004 23:31:04.575438  3990 net.cpp:120] Top shape: 1 80 (80)
I1004 23:31:04.575444  3990 layer_factory.hpp:74] Creating layer sum
I1004 23:31:04.575456  3990 net.cpp:84] Creating Layer sum
I1004 23:31:04.575464  3990 net.cpp:380] sum <- cls_score_0_cls_score_0_split_0
I1004 23:31:04.575470  3990 net.cpp:380] sum <- cls_score_0_cls_score_0_split_1
I1004 23:31:04.575479  3990 net.cpp:338] sum -> cls_score
I1004 23:31:04.575489  3990 net.cpp:113] Setting up sum
I1004 23:31:04.575497  3990 net.cpp:120] Top shape: 1 20 (20)
I1004 23:31:04.575505  3990 layer_factory.hpp:74] Creating layer cls_prob
I1004 23:31:04.575515  3990 net.cpp:84] Creating Layer cls_prob
I1004 23:31:04.575522  3990 net.cpp:380] cls_prob <- cls_score
I1004 23:31:04.575531  3990 net.cpp:338] cls_prob -> cls_prob
I1004 23:31:04.575539  3990 net.cpp:113] Setting up cls_prob
I1004 23:31:04.575616  3990 net.cpp:120] Top shape: 1 20 (20)
I1004 23:31:04.575628  3990 net.cpp:169] cls_prob does not need backward computation.
I1004 23:31:04.575635  3990 net.cpp:169] sum does not need backward computation.
I1004 23:31:04.575641  3990 net.cpp:169] sum does not need backward computation.
I1004 23:31:04.575647  3990 net.cpp:169] bbox_pred_0_bbox_pred_0_split does not need backward computation.
I1004 23:31:04.575652  3990 net.cpp:169] bbox_pred does not need backward computation.
I1004 23:31:04.575659  3990 net.cpp:169] cls_score_0_cls_score_0_split does not need backward computation.
I1004 23:31:04.575664  3990 net.cpp:169] cls_score does not need backward computation.
I1004 23:31:04.575670  3990 net.cpp:169] fc7_drop7_0_split does not need backward computation.
I1004 23:31:04.575675  3990 net.cpp:169] drop7 does not need backward computation.
I1004 23:31:04.575681  3990 net.cpp:169] relu7 does not need backward computation.
I1004 23:31:04.575686  3990 net.cpp:169] fc7 does not need backward computation.
I1004 23:31:04.575692  3990 net.cpp:169] drop6 does not need backward computation.
I1004 23:31:04.575698  3990 net.cpp:169] relu6 does not need backward computation.
I1004 23:31:04.575705  3990 net.cpp:169] fc6 does not need backward computation.
I1004 23:31:04.575711  3990 net.cpp:169] roi_pool5 does not need backward computation.
I1004 23:31:04.575716  3990 net.cpp:169] relu5 does not need backward computation.
I1004 23:31:04.575721  3990 net.cpp:169] conv5 does not need backward computation.
I1004 23:31:04.575727  3990 net.cpp:169] relu4 does not need backward computation.
I1004 23:31:04.575733  3990 net.cpp:169] conv4 does not need backward computation.
I1004 23:31:04.575739  3990 net.cpp:169] relu3 does not need backward computation.
I1004 23:31:04.575745  3990 net.cpp:169] conv3 does not need backward computation.
I1004 23:31:04.575752  3990 net.cpp:169] norm2 does not need backward computation.
I1004 23:31:04.575757  3990 net.cpp:169] pool2 does not need backward computation.
I1004 23:31:04.575763  3990 net.cpp:169] relu2 does not need backward computation.
I1004 23:31:04.575769  3990 net.cpp:169] conv2 does not need backward computation.
I1004 23:31:04.575775  3990 net.cpp:169] norm1 does not need backward computation.
I1004 23:31:04.575780  3990 net.cpp:169] pool1 does not need backward computation.
I1004 23:31:04.575786  3990 net.cpp:169] relu1 does not need backward computation.
I1004 23:31:04.575793  3990 net.cpp:169] conv1 does not need backward computation.
I1004 23:31:04.575798  3990 net.cpp:205] This network produces output bbox_pred
I1004 23:31:04.575804  3990 net.cpp:205] This network produces output cls_prob
I1004 23:31:04.575827  3990 net.cpp:447] Collecting Learning Rate and Weight Decay.
I1004 23:31:04.575840  3990 net.cpp:217] Network initialization done.
I1004 23:31:04.575847  3990 net.cpp:218] Memory required for data: 7337104
nyud2_images_2015_test ss roidb loaded from /data/gpuuser1/fast-rcnn/data/cache/nyud2_images_2015_test_mcg_roidb.pkl
im_detect: 1/654 0.322s 0.007s
im_detect: 2/654 0.283s 0.006s
im_detect: 3/654 0.277s 0.006s
im_detect: 4/654 0.277s 0.006s
im_detect: 5/654 0.270s 0.006s
im_detect: 6/654 0.268s 0.006s
im_detect: 7/654 0.267s 0.006s
im_detect: 8/654 0.264s 0.006s
im_detect: 9/654 0.263s 0.006s
im_detect: 10/654 0.263s 0.006s
im_detect: 11/654 0.263s 0.006s
im_detect: 12/654 0.262s 0.006s
im_detect: 13/654 0.262s 0.006s
im_detect: 14/654 0.261s 0.006s
im_detect: 15/654 0.259s 0.006s
im_detect: 16/654 0.259s 0.006s
im_detect: 17/654 0.259s 0.006s
im_detect: 18/654 0.259s 0.006s
im_detect: 19/654 0.258s 0.006s
im_detect: 20/654 0.258s 0.006s
im_detect: 21/654 0.258s 0.006s
im_detect: 22/654 0.259s 0.006s
im_detect: 23/654 0.258s 0.006s
im_detect: 24/654 0.257s 0.006s
im_detect: 25/654 0.257s 0.006s
im_detect: 26/654 0.256s 0.006s
im_detect: 27/654 0.255s 0.006s
im_detect: 28/654 0.255s 0.006s
im_detect: 29/654 0.254s 0.006s
im_detect: 30/654 0.254s 0.006s
im_detect: 31/654 0.254s 0.006s
im_detect: 32/654 0.255s 0.006s
im_detect: 33/654 0.254s 0.006s
im_detect: 34/654 0.254s 0.006s
im_detect: 35/654 0.254s 0.006s
im_detect: 36/654 0.254s 0.006s
im_detect: 37/654 0.254s 0.006s
im_detect: 38/654 0.254s 0.006s
im_detect: 39/654 0.254s 0.006s
im_detect: 40/654 0.254s 0.006s
im_detect: 41/654 0.254s 0.006s
im_detect: 42/654 0.254s 0.006s
im_detect: 43/654 0.254s 0.006s
im_detect: 44/654 0.254s 0.006s
im_detect: 45/654 0.254s 0.006s
im_detect: 46/654 0.254s 0.006s
im_detect: 47/654 0.255s 0.006s
im_detect: 48/654 0.255s 0.006s
im_detect: 49/654 0.255s 0.006s
im_detect: 50/654 0.255s 0.006s
im_detect: 51/654 0.255s 0.006s
im_detect: 52/654 0.255s 0.006s
im_detect: 53/654 0.255s 0.006s
im_detect: 54/654 0.255s 0.006s
im_detect: 55/654 0.254s 0.006s
im_detect: 56/654 0.254s 0.006s
im_detect: 57/654 0.254s 0.006s
im_detect: 58/654 0.254s 0.006s
im_detect: 59/654 0.254s 0.006s
im_detect: 60/654 0.254s 0.006s
im_detect: 61/654 0.254s 0.006s
im_detect: 62/654 0.254s 0.006s
im_detect: 63/654 0.254s 0.006s
im_detect: 64/654 0.253s 0.006s
im_detect: 65/654 0.253s 0.006s
im_detect: 66/654 0.253s 0.006s
im_detect: 67/654 0.253s 0.006s
im_detect: 68/654 0.254s 0.006s
im_detect: 69/654 0.254s 0.006s
im_detect: 70/654 0.254s 0.006s
im_detect: 71/654 0.254s 0.006s
im_detect: 72/654 0.254s 0.006s
im_detect: 73/654 0.254s 0.006s
im_detect: 74/654 0.254s 0.006s
im_detect: 75/654 0.253s 0.006s
im_detect: 76/654 0.253s 0.006s
im_detect: 77/654 0.253s 0.006s
im_detect: 78/654 0.253s 0.006s
im_detect: 79/654 0.253s 0.006s
im_detect: 80/654 0.253s 0.006s
im_detect: 81/654 0.253s 0.006s
im_detect: 82/654 0.253s 0.006s
im_detect: 83/654 0.253s 0.006s
im_detect: 84/654 0.253s 0.006s
im_detect: 85/654 0.252s 0.006s
im_detect: 86/654 0.252s 0.006s
im_detect: 87/654 0.252s 0.006s
im_detect: 88/654 0.252s 0.006s
im_detect: 89/654 0.252s 0.006s
im_detect: 90/654 0.252s 0.006s
im_detect: 91/654 0.252s 0.006s
im_detect: 92/654 0.252s 0.006s
im_detect: 93/654 0.252s 0.006s
im_detect: 94/654 0.252s 0.006s
im_detect: 95/654 0.252s 0.006s
im_detect: 96/654 0.252s 0.006s
im_detect: 97/654 0.252s 0.006s
im_detect: 98/654 0.252s 0.006s
im_detect: 99/654 0.252s 0.006s
im_detect: 100/654 0.252s 0.006s
im_detect: 101/654 0.252s 0.006s
im_detect: 102/654 0.252s 0.006s
im_detect: 103/654 0.252s 0.006s
im_detect: 104/654 0.252s 0.006s
im_detect: 105/654 0.252s 0.006s
im_detect: 106/654 0.252s 0.006s
im_detect: 107/654 0.252s 0.006s
im_detect: 108/654 0.253s 0.006s
im_detect: 109/654 0.253s 0.006s
im_detect: 110/654 0.253s 0.006s
im_detect: 111/654 0.253s 0.006s
im_detect: 112/654 0.253s 0.006s
im_detect: 113/654 0.253s 0.006s
im_detect: 114/654 0.253s 0.006s
im_detect: 115/654 0.253s 0.006s
im_detect: 116/654 0.253s 0.006s
im_detect: 117/654 0.253s 0.006s
im_detect: 118/654 0.253s 0.006s
im_detect: 119/654 0.253s 0.006s
im_detect: 120/654 0.253s 0.006s
im_detect: 121/654 0.253s 0.006s
im_detect: 122/654 0.253s 0.006s
im_detect: 123/654 0.253s 0.006s
im_detect: 124/654 0.253s 0.006s
im_detect: 125/654 0.253s 0.006s
im_detect: 126/654 0.253s 0.006s
im_detect: 127/654 0.253s 0.006s
im_detect: 128/654 0.253s 0.006s
im_detect: 129/654 0.254s 0.006s
im_detect: 130/654 0.254s 0.006s
im_detect: 131/654 0.254s 0.006s
im_detect: 132/654 0.254s 0.006s
im_detect: 133/654 0.254s 0.006s
im_detect: 134/654 0.254s 0.006s
im_detect: 135/654 0.254s 0.006s
im_detect: 136/654 0.254s 0.006s
im_detect: 137/654 0.254s 0.006s
im_detect: 138/654 0.254s 0.006s
im_detect: 139/654 0.254s 0.006s
im_detect: 140/654 0.254s 0.006s
im_detect: 141/654 0.254s 0.006s
im_detect: 142/654 0.254s 0.006s
im_detect: 143/654 0.254s 0.006s
im_detect: 144/654 0.254s 0.006s
im_detect: 145/654 0.254s 0.006s
im_detect: 146/654 0.254s 0.006s
im_detect: 147/654 0.254s 0.006s
im_detect: 148/654 0.254s 0.006s
im_detect: 149/654 0.254s 0.006s
im_detect: 150/654 0.254s 0.006s
im_detect: 151/654 0.254s 0.006s
im_detect: 152/654 0.254s 0.006s
im_detect: 153/654 0.254s 0.006s
im_detect: 154/654 0.254s 0.006s
im_detect: 155/654 0.254s 0.006s
im_detect: 156/654 0.254s 0.006s
im_detect: 157/654 0.254s 0.006s
im_detect: 158/654 0.254s 0.006s
im_detect: 159/654 0.254s 0.006s
im_detect: 160/654 0.255s 0.006s
im_detect: 161/654 0.255s 0.006s
im_detect: 162/654 0.255s 0.006s
im_detect: 163/654 0.255s 0.006s
im_detect: 164/654 0.255s 0.006s
im_detect: 165/654 0.255s 0.006s
im_detect: 166/654 0.255s 0.006s
im_detect: 167/654 0.255s 0.006s
im_detect: 168/654 0.255s 0.006s
im_detect: 169/654 0.255s 0.006s
im_detect: 170/654 0.255s 0.006s
im_detect: 171/654 0.255s 0.006s
im_detect: 172/654 0.255s 0.006s
im_detect: 173/654 0.255s 0.006s
im_detect: 174/654 0.255s 0.006s
im_detect: 175/654 0.255s 0.006s
im_detect: 176/654 0.255s 0.006s
im_detect: 177/654 0.255s 0.006s
im_detect: 178/654 0.255s 0.006s
im_detect: 179/654 0.255s 0.006s
im_detect: 180/654 0.255s 0.006s
im_detect: 181/654 0.255s 0.006s
im_detect: 182/654 0.255s 0.006s
im_detect: 183/654 0.255s 0.006s
im_detect: 184/654 0.255s 0.006s
im_detect: 185/654 0.255s 0.006s
im_detect: 186/654 0.255s 0.006s
im_detect: 187/654 0.255s 0.006s
im_detect: 188/654 0.255s 0.006s
im_detect: 189/654 0.255s 0.006s
im_detect: 190/654 0.255s 0.006s
im_detect: 191/654 0.255s 0.006s
im_detect: 192/654 0.255s 0.006s
im_detect: 193/654 0.255s 0.006s
im_detect: 194/654 0.255s 0.006s
im_detect: 195/654 0.255s 0.006s
im_detect: 196/654 0.255s 0.006s
im_detect: 197/654 0.255s 0.006s
im_detect: 198/654 0.255s 0.006s
im_detect: 199/654 0.255s 0.006s
im_detect: 200/654 0.255s 0.006s
im_detect: 201/654 0.255s 0.006s
im_detect: 202/654 0.255s 0.006s
im_detect: 203/654 0.255s 0.006s
im_detect: 204/654 0.255s 0.006s
im_detect: 205/654 0.255s 0.006s
im_detect: 206/654 0.255s 0.006s
im_detect: 207/654 0.255s 0.006s
im_detect: 208/654 0.255s 0.006s
im_detect: 209/654 0.255s 0.006s
im_detect: 210/654 0.255s 0.006s
im_detect: 211/654 0.255s 0.006s
im_detect: 212/654 0.255s 0.006s
im_detect: 213/654 0.255s 0.006s
im_detect: 214/654 0.255s 0.006s
im_detect: 215/654 0.255s 0.006s
im_detect: 216/654 0.255s 0.006s
im_detect: 217/654 0.255s 0.006s
im_detect: 218/654 0.255s 0.006s
im_detect: 219/654 0.255s 0.006s
im_detect: 220/654 0.255s 0.006s
im_detect: 221/654 0.255s 0.006s
im_detect: 222/654 0.255s 0.006s
im_detect: 223/654 0.255s 0.006s
im_detect: 224/654 0.255s 0.006s
im_detect: 225/654 0.255s 0.006s
im_detect: 226/654 0.255s 0.006s
im_detect: 227/654 0.255s 0.006s
im_detect: 228/654 0.255s 0.006s
im_detect: 229/654 0.255s 0.006s
im_detect: 230/654 0.255s 0.006s
im_detect: 231/654 0.255s 0.006s
im_detect: 232/654 0.255s 0.006s
im_detect: 233/654 0.255s 0.006s
im_detect: 234/654 0.256s 0.006s
im_detect: 235/654 0.256s 0.006s
im_detect: 236/654 0.256s 0.006s
im_detect: 237/654 0.256s 0.006s
im_detect: 238/654 0.256s 0.006s
im_detect: 239/654 0.256s 0.006s
im_detect: 240/654 0.256s 0.006s
im_detect: 241/654 0.256s 0.006s
im_detect: 242/654 0.256s 0.006s
im_detect: 243/654 0.256s 0.006s
im_detect: 244/654 0.256s 0.006s
im_detect: 245/654 0.256s 0.006s
im_detect: 246/654 0.256s 0.006s
im_detect: 247/654 0.256s 0.006s
im_detect: 248/654 0.256s 0.006s
im_detect: 249/654 0.256s 0.006s
im_detect: 250/654 0.256s 0.006s
im_detect: 251/654 0.256s 0.006s
im_detect: 252/654 0.256s 0.006s
im_detect: 253/654 0.256s 0.006s
im_detect: 254/654 0.256s 0.006s
im_detect: 255/654 0.256s 0.006s
im_detect: 256/654 0.256s 0.006s
im_detect: 257/654 0.256s 0.006s
im_detect: 258/654 0.256s 0.006s
im_detect: 259/654 0.257s 0.006s
im_detect: 260/654 0.257s 0.006s
im_detect: 261/654 0.257s 0.006s
im_detect: 262/654 0.257s 0.006s
im_detect: 263/654 0.257s 0.006s
im_detect: 264/654 0.257s 0.006s
im_detect: 265/654 0.257s 0.006s
im_detect: 266/654 0.257s 0.006s
im_detect: 267/654 0.257s 0.006s
im_detect: 268/654 0.257s 0.006s
im_detect: 269/654 0.257s 0.006s
im_detect: 270/654 0.257s 0.006s
im_detect: 271/654 0.257s 0.006s
im_detect: 272/654 0.257s 0.006s
im_detect: 273/654 0.257s 0.006s
im_detect: 274/654 0.257s 0.006s
im_detect: 275/654 0.257s 0.006s
im_detect: 276/654 0.257s 0.006s
im_detect: 277/654 0.257s 0.006s
im_detect: 278/654 0.257s 0.006s
im_detect: 279/654 0.257s 0.006s
im_detect: 280/654 0.257s 0.006s
im_detect: 281/654 0.257s 0.006s
im_detect: 282/654 0.257s 0.006s
im_detect: 283/654 0.257s 0.006s
im_detect: 284/654 0.257s 0.006s
im_detect: 285/654 0.257s 0.006s
im_detect: 286/654 0.257s 0.006s
im_detect: 287/654 0.257s 0.006s
im_detect: 288/654 0.257s 0.006s
im_detect: 289/654 0.257s 0.006s
im_detect: 290/654 0.257s 0.006s
im_detect: 291/654 0.257s 0.006s
im_detect: 292/654 0.257s 0.006s
im_detect: 293/654 0.257s 0.006s
im_detect: 294/654 0.257s 0.006s
im_detect: 295/654 0.258s 0.006s
im_detect: 296/654 0.258s 0.007s
im_detect: 297/654 0.258s 0.007s
im_detect: 298/654 0.258s 0.007s
im_detect: 299/654 0.258s 0.007s
im_detect: 300/654 0.258s 0.007s
im_detect: 301/654 0.258s 0.007s
im_detect: 302/654 0.258s 0.007s
im_detect: 303/654 0.258s 0.007s
im_detect: 304/654 0.258s 0.007s
im_detect: 305/654 0.258s 0.007s
im_detect: 306/654 0.258s 0.007s
im_detect: 307/654 0.258s 0.007s
im_detect: 308/654 0.258s 0.007s
im_detect: 309/654 0.258s 0.007s
im_detect: 310/654 0.258s 0.007s
im_detect: 311/654 0.258s 0.007s
im_detect: 312/654 0.258s 0.007s
im_detect: 313/654 0.258s 0.007s
im_detect: 314/654 0.258s 0.007s
im_detect: 315/654 0.258s 0.007s
im_detect: 316/654 0.258s 0.007s
im_detect: 317/654 0.258s 0.007s
im_detect: 318/654 0.258s 0.007s
im_detect: 319/654 0.258s 0.007s
im_detect: 320/654 0.258s 0.007s
im_detect: 321/654 0.258s 0.007s
im_detect: 322/654 0.258s 0.007s
im_detect: 323/654 0.258s 0.007s
im_detect: 324/654 0.258s 0.007s
im_detect: 325/654 0.258s 0.007s
im_detect: 326/654 0.259s 0.007s
im_detect: 327/654 0.259s 0.007s
im_detect: 328/654 0.259s 0.007s
im_detect: 329/654 0.259s 0.007s
im_detect: 330/654 0.259s 0.007s
im_detect: 331/654 0.259s 0.007s
im_detect: 332/654 0.259s 0.007s
im_detect: 333/654 0.259s 0.007s
im_detect: 334/654 0.259s 0.007s
im_detect: 335/654 0.259s 0.007s
im_detect: 336/654 0.259s 0.007s
im_detect: 337/654 0.259s 0.007s
im_detect: 338/654 0.259s 0.007s
im_detect: 339/654 0.259s 0.007s
im_detect: 340/654 0.259s 0.007s
im_detect: 341/654 0.259s 0.007s
im_detect: 342/654 0.259s 0.007s
im_detect: 343/654 0.259s 0.007s
im_detect: 344/654 0.259s 0.007s
im_detect: 345/654 0.260s 0.007s
im_detect: 346/654 0.260s 0.007s
im_detect: 347/654 0.260s 0.007s
im_detect: 348/654 0.260s 0.007s
im_detect: 349/654 0.260s 0.007s
im_detect: 350/654 0.260s 0.007s
im_detect: 351/654 0.260s 0.007s
im_detect: 352/654 0.260s 0.007s
im_detect: 353/654 0.260s 0.007s
im_detect: 354/654 0.260s 0.007s
im_detect: 355/654 0.260s 0.007s
im_detect: 356/654 0.260s 0.007s
im_detect: 357/654 0.260s 0.007s
im_detect: 358/654 0.260s 0.007s
im_detect: 359/654 0.260s 0.007s
im_detect: 360/654 0.260s 0.007s
im_detect: 361/654 0.260s 0.007s
im_detect: 362/654 0.260s 0.007s
im_detect: 363/654 0.260s 0.007s
im_detect: 364/654 0.261s 0.007s
im_detect: 365/654 0.261s 0.007s
im_detect: 366/654 0.261s 0.007s
im_detect: 367/654 0.261s 0.007s
im_detect: 368/654 0.261s 0.007s
im_detect: 369/654 0.261s 0.007s
im_detect: 370/654 0.261s 0.007s
im_detect: 371/654 0.261s 0.007s
im_detect: 372/654 0.261s 0.007s
im_detect: 373/654 0.261s 0.007s
im_detect: 374/654 0.261s 0.007s
im_detect: 375/654 0.261s 0.007s
im_detect: 376/654 0.261s 0.007s
im_detect: 377/654 0.261s 0.007s
im_detect: 378/654 0.261s 0.007s
im_detect: 379/654 0.261s 0.007s
im_detect: 380/654 0.261s 0.007s
im_detect: 381/654 0.261s 0.007s
im_detect: 382/654 0.261s 0.007s
im_detect: 383/654 0.262s 0.007s
im_detect: 384/654 0.262s 0.007s
im_detect: 385/654 0.262s 0.007s
im_detect: 386/654 0.262s 0.007s
im_detect: 387/654 0.262s 0.007s
im_detect: 388/654 0.262s 0.007s
im_detect: 389/654 0.262s 0.007s
im_detect: 390/654 0.262s 0.007s
im_detect: 391/654 0.262s 0.007s
im_detect: 392/654 0.262s 0.007s
im_detect: 393/654 0.262s 0.007s
im_detect: 394/654 0.262s 0.007s
im_detect: 395/654 0.262s 0.007s
im_detect: 396/654 0.262s 0.007s
im_detect: 397/654 0.262s 0.007s
im_detect: 398/654 0.262s 0.007s
im_detect: 399/654 0.262s 0.007s
im_detect: 400/654 0.262s 0.007s
im_detect: 401/654 0.262s 0.007s
im_detect: 402/654 0.262s 0.007s
im_detect: 403/654 0.262s 0.007s
im_detect: 404/654 0.262s 0.007s
im_detect: 405/654 0.263s 0.007s
im_detect: 406/654 0.263s 0.007s
im_detect: 407/654 0.263s 0.007s
im_detect: 408/654 0.263s 0.007s
im_detect: 409/654 0.263s 0.007s
im_detect: 410/654 0.263s 0.007s
im_detect: 411/654 0.263s 0.007s
im_detect: 412/654 0.263s 0.007s
im_detect: 413/654 0.263s 0.007s
im_detect: 414/654 0.263s 0.007s
im_detect: 415/654 0.263s 0.007s
im_detect: 416/654 0.263s 0.007s
im_detect: 417/654 0.263s 0.007s
im_detect: 418/654 0.263s 0.007s
im_detect: 419/654 0.263s 0.007s
im_detect: 420/654 0.263s 0.007s
im_detect: 421/654 0.263s 0.007s
im_detect: 422/654 0.263s 0.007s
im_detect: 423/654 0.263s 0.007s
im_detect: 424/654 0.263s 0.007s
im_detect: 425/654 0.263s 0.007s
im_detect: 426/654 0.263s 0.007s
im_detect: 427/654 0.263s 0.007s
im_detect: 428/654 0.263s 0.007s
im_detect: 429/654 0.263s 0.007s
im_detect: 430/654 0.263s 0.007s
im_detect: 431/654 0.263s 0.007s
im_detect: 432/654 0.263s 0.007s
im_detect: 433/654 0.263s 0.007s
im_detect: 434/654 0.263s 0.007s
im_detect: 435/654 0.264s 0.007s
im_detect: 436/654 0.264s 0.007s
im_detect: 437/654 0.264s 0.007s
im_detect: 438/654 0.264s 0.007s
im_detect: 439/654 0.264s 0.007s
im_detect: 440/654 0.264s 0.007s
im_detect: 441/654 0.264s 0.007s
im_detect: 442/654 0.264s 0.007s
im_detect: 443/654 0.264s 0.007s
im_detect: 444/654 0.264s 0.007s
im_detect: 445/654 0.264s 0.007s
im_detect: 446/654 0.264s 0.007s
im_detect: 447/654 0.264s 0.007s
im_detect: 448/654 0.264s 0.007s
im_detect: 449/654 0.264s 0.007s
im_detect: 450/654 0.264s 0.007s
im_detect: 451/654 0.264s 0.007s
im_detect: 452/654 0.264s 0.007s
im_detect: 453/654 0.264s 0.007s
im_detect: 454/654 0.264s 0.007s
im_detect: 455/654 0.264s 0.007s
im_detect: 456/654 0.264s 0.007s
im_detect: 457/654 0.265s 0.007s
im_detect: 458/654 0.265s 0.007s
im_detect: 459/654 0.265s 0.007s
im_detect: 460/654 0.265s 0.007s
im_detect: 461/654 0.265s 0.007s
im_detect: 462/654 0.265s 0.007s
im_detect: 463/654 0.265s 0.007s
im_detect: 464/654 0.265s 0.007s
im_detect: 465/654 0.265s 0.007s
im_detect: 466/654 0.265s 0.007s
im_detect: 467/654 0.265s 0.007s
im_detect: 468/654 0.265s 0.007s
im_detect: 469/654 0.265s 0.007s
im_detect: 470/654 0.265s 0.007s
im_detect: 471/654 0.265s 0.007s
im_detect: 472/654 0.265s 0.007s
im_detect: 473/654 0.265s 0.007s
im_detect: 474/654 0.265s 0.007s
im_detect: 475/654 0.265s 0.007s
im_detect: 476/654 0.265s 0.007s
im_detect: 477/654 0.265s 0.007s
im_detect: 478/654 0.265s 0.007s
im_detect: 479/654 0.265s 0.007s
im_detect: 480/654 0.265s 0.007s
im_detect: 481/654 0.265s 0.007s
im_detect: 482/654 0.266s 0.007s
im_detect: 483/654 0.266s 0.007s
im_detect: 484/654 0.266s 0.007s
im_detect: 485/654 0.266s 0.007s
im_detect: 486/654 0.266s 0.007s
im_detect: 487/654 0.266s 0.007s
im_detect: 488/654 0.266s 0.007s
im_detect: 489/654 0.266s 0.007s
im_detect: 490/654 0.266s 0.007s
im_detect: 491/654 0.266s 0.007s
im_detect: 492/654 0.266s 0.007s
im_detect: 493/654 0.266s 0.007s
im_detect: 494/654 0.266s 0.007s
im_detect: 495/654 0.266s 0.007s
im_detect: 496/654 0.266s 0.007s
im_detect: 497/654 0.266s 0.007s
im_detect: 498/654 0.266s 0.007s
im_detect: 499/654 0.266s 0.007s
im_detect: 500/654 0.266s 0.007s
im_detect: 501/654 0.266s 0.007s
im_detect: 502/654 0.266s 0.007s
im_detect: 503/654 0.266s 0.007s
im_detect: 504/654 0.266s 0.007s
im_detect: 505/654 0.266s 0.007s
im_detect: 506/654 0.266s 0.007s
im_detect: 507/654 0.266s 0.007s
im_detect: 508/654 0.266s 0.007s
im_detect: 509/654 0.266s 0.007s
im_detect: 510/654 0.266s 0.007s
im_detect: 511/654 0.266s 0.007s
im_detect: 512/654 0.266s 0.007s
im_detect: 513/654 0.266s 0.007s
im_detect: 514/654 0.266s 0.007s
im_detect: 515/654 0.266s 0.007s
im_detect: 516/654 0.266s 0.007s
im_detect: 517/654 0.266s 0.006s
im_detect: 518/654 0.266s 0.006s
im_detect: 519/654 0.266s 0.006s
im_detect: 520/654 0.266s 0.006s
im_detect: 521/654 0.266s 0.006s
im_detect: 522/654 0.266s 0.006s
im_detect: 523/654 0.266s 0.006s
im_detect: 524/654 0.266s 0.006s
im_detect: 525/654 0.266s 0.006s
im_detect: 526/654 0.266s 0.006s
im_detect: 527/654 0.266s 0.006s
im_detect: 528/654 0.267s 0.006s
im_detect: 529/654 0.267s 0.006s
im_detect: 530/654 0.267s 0.006s
im_detect: 531/654 0.267s 0.006s
im_detect: 532/654 0.267s 0.006s
im_detect: 533/654 0.267s 0.006s
im_detect: 534/654 0.267s 0.006s
im_detect: 535/654 0.267s 0.006s
im_detect: 536/654 0.267s 0.006s
im_detect: 537/654 0.267s 0.006s
im_detect: 538/654 0.267s 0.006s
im_detect: 539/654 0.267s 0.006s
im_detect: 540/654 0.267s 0.006s
im_detect: 541/654 0.267s 0.006s
im_detect: 542/654 0.267s 0.006s
im_detect: 543/654 0.267s 0.006s
im_detect: 544/654 0.267s 0.006s
im_detect: 545/654 0.267s 0.006s
im_detect: 546/654 0.267s 0.006s
im_detect: 547/654 0.267s 0.006s
im_detect: 548/654 0.267s 0.006s
im_detect: 549/654 0.267s 0.006s
im_detect: 550/654 0.267s 0.006s
im_detect: 551/654 0.267s 0.006s
im_detect: 552/654 0.267s 0.006s
im_detect: 553/654 0.267s 0.006s
im_detect: 554/654 0.267s 0.006s
im_detect: 555/654 0.267s 0.006s
im_detect: 556/654 0.268s 0.006s
im_detect: 557/654 0.268s 0.006s
im_detect: 558/654 0.268s 0.006s
im_detect: 559/654 0.268s 0.006s
im_detect: 560/654 0.268s 0.006s
im_detect: 561/654 0.268s 0.006s
im_detect: 562/654 0.268s 0.006s
im_detect: 563/654 0.268s 0.006s
im_detect: 564/654 0.268s 0.006s
im_detect: 565/654 0.268s 0.006s
im_detect: 566/654 0.268s 0.006s
im_detect: 567/654 0.268s 0.006s
im_detect: 568/654 0.268s 0.006s
im_detect: 569/654 0.268s 0.006s
im_detect: 570/654 0.268s 0.006s
im_detect: 571/654 0.268s 0.006s
im_detect: 572/654 0.268s 0.006s
im_detect: 573/654 0.268s 0.006s
im_detect: 574/654 0.268s 0.006s
im_detect: 575/654 0.268s 0.006s
im_detect: 576/654 0.268s 0.006s
im_detect: 577/654 0.268s 0.006s
im_detect: 578/654 0.268s 0.006s
im_detect: 579/654 0.268s 0.006s
im_detect: 580/654 0.268s 0.006s
im_detect: 581/654 0.268s 0.006s
im_detect: 582/654 0.268s 0.006s
im_detect: 583/654 0.268s 0.006s
im_detect: 584/654 0.268s 0.006s
im_detect: 585/654 0.268s 0.006s
im_detect: 586/654 0.268s 0.006s
im_detect: 587/654 0.269s 0.006s
im_detect: 588/654 0.269s 0.006s
im_detect: 589/654 0.269s 0.006s
im_detect: 590/654 0.269s 0.006s
im_detect: 591/654 0.269s 0.006s
im_detect: 592/654 0.269s 0.006s
im_detect: 593/654 0.269s 0.006s
im_detect: 594/654 0.269s 0.006s
im_detect: 595/654 0.269s 0.006s
im_detect: 596/654 0.269s 0.006s
im_detect: 597/654 0.269s 0.006s
im_detect: 598/654 0.269s 0.006s
im_detect: 599/654 0.269s 0.006s
im_detect: 600/654 0.269s 0.006s
im_detect: 601/654 0.269s 0.006s
im_detect: 602/654 0.269s 0.006s
im_detect: 603/654 0.269s 0.006s
im_detect: 604/654 0.269s 0.006s
im_detect: 605/654 0.269s 0.006s
im_detect: 606/654 0.269s 0.006s
im_detect: 607/654 0.269s 0.006s
im_detect: 608/654 0.269s 0.006s
im_detect: 609/654 0.269s 0.006s
im_detect: 610/654 0.269s 0.006s
im_detect: 611/654 0.269s 0.006s
im_detect: 612/654 0.269s 0.006s
im_detect: 613/654 0.269s 0.006s
im_detect: 614/654 0.269s 0.006s
im_detect: 615/654 0.269s 0.006s
im_detect: 616/654 0.269s 0.006s
im_detect: 617/654 0.269s 0.006s
im_detect: 618/654 0.269s 0.006s
im_detect: 619/654 0.269s 0.006s
im_detect: 620/654 0.269s 0.006s
im_detect: 621/654 0.270s 0.006s
im_detect: 622/654 0.270s 0.006s
im_detect: 623/654 0.270s 0.006s
im_detect: 624/654 0.270s 0.006s
im_detect: 625/654 0.270s 0.006s
im_detect: 626/654 0.270s 0.006s
im_detect: 627/654 0.270s 0.006s
im_detect: 628/654 0.270s 0.006s
im_detect: 629/654 0.270s 0.006s
im_detect: 630/654 0.270s 0.006s
im_detect: 631/654 0.270s 0.006s
im_detect: 632/654 0.270s 0.006s
im_detect: 633/654 0.270s 0.006s
im_detect: 634/654 0.270s 0.006s
im_detect: 635/654 0.270s 0.006s
im_detect: 636/654 0.270s 0.006s
im_detect: 637/654 0.270s 0.006s
im_detect: 638/654 0.270s 0.006s
im_detect: 639/654 0.270s 0.006s
im_detect: 640/654 0.270s 0.006s
im_detect: 641/654 0.270s 0.006s
im_detect: 642/654 0.270s 0.006s
im_detect: 643/654 0.270s 0.006s
im_detect: 644/654 0.270s 0.006s
im_detect: 645/654 0.270s 0.006s
im_detect: 646/654 0.270s 0.006s
im_detect: 647/654 0.270s 0.006s
im_detect: 648/654 0.270s 0.006s
im_detect: 649/654 0.270s 0.006s
im_detect: 650/654 0.270s 0.006s
im_detect: 651/654 0.270s 0.006s
im_detect: 652/654 0.270s 0.006s
im_detect: 653/654 0.270s 0.006s
im_detect: 654/654 0.270s 0.006s
Applying NMS to all detections
Evaluating detections
nyud2_images_2015_test gt roidb loaded from /data/gpuuser1/fast-rcnn/data/cache/nyud2_images_2015_test_gt_roidb.pkl
bathtub             : 16.664698
bed                 : 51.498259
bookshelf           : 30.716459
box                 :  0.929144
chair               : 25.662945
counter             : 32.684302
desk                : 10.235462
door                : 17.625616
dresser             : 22.447406
garbage-bin         : 14.197748
lamp                : 26.773520
monitor             : 38.834102
night-stand         : 26.525807
pillow              : 20.691530
sink                : 18.811430
sofa                : 32.729717
table               : 14.895338
television          : 36.274408
toilet              : 51.968713
mean                : 25.798242
